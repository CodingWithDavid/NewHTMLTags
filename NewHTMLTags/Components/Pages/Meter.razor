@page "/meter"
@using System.Timers
@implements IDisposable

<PageTitle>Meter</PageTitle>

<h1>Meter</h1>

<meter min="0" max="100" value="@currentValue">@currentValue%</meter>

<p>Meter: @currentValue% (@elapsedSeconds seconds elapsed)</p>

<button @onclick="StartMeter" disabled="@isRunning">Start</button>
<button @onclick="ResetMeter">Reset</button>

@code {
    private int currentValue = 75;
    private int elapsedSeconds = 0;
    private bool isRunning = false;
    private System.Timers.Timer? timer;

    private void StartMeter()
    {
        if (isRunning) return;
        
        isRunning = true;
        currentValue = 0;
        elapsedSeconds = 0;
        
        timer = new System.Timers.Timer(300); // 1 second interval
        timer.Elapsed += OnTimedEvent;
        timer.AutoReset = true;
        timer.Enabled = true;
    }
    
    private void OnTimedEvent(object? source, ElapsedEventArgs e)
    {
        elapsedSeconds++;
        currentValue = elapsedSeconds;
        
        if (currentValue >= 100)
        {
            timer?.Stop();
            isRunning = false;
        }
        
        InvokeAsync(StateHasChanged);
    }
    
    private void ResetMeter()
    {
        timer?.Stop();
        isRunning = false;
        currentValue = 75; // Reset to original value
        elapsedSeconds = 0;
        StateHasChanged();
    }
    
    public void Dispose()
    {
        timer?.Dispose();
    }
}